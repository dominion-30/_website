CSS Grid Layout Module

Grid Layout

The CSS Grid layout module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.

Grid Elements

A grid layout consists of a parent element, with one or more child elements.

<div class="grid-container">
<div class="grid-item">1</div>
<div class="grid-item">2</div>
<div class="grid-item">3</div>
<div class="grid-item">4</div>
</div> 



Display property

An HTML element becomes a grid container when its display property is set to grid or inline-grid

Note: All direct children of the grid container automatically become grid items.


Grid Columns

The vertical lines of grid items are called columns.


Grid rows

The horizontal lines of grid items are called rows.

Grid Gaps

The spaces between each column/row are called gaps

You can adjust the gap size by using one of the following properties:

column-gap
row-gap
gap


The column-gap property sets the gap between the columns:

.grid-container{
display:grid;
column-gap:50px;
}


The row-gap property set the gap between the rows:

.grid-container{
display:grid;
row-gap:50px;
}


Note: The gap property is a shorthand property for the row-gap and the column-gap properties.

.grid-container{
display:grid;
gap: 50px 50px;
}

The gap property can also be used to set both the row gap and the column gap in one value:

.grid-container{
display:grid;
gap: 50px;

}


Grid Lines

The lines between columns are called column lines.

The lines between rows are called row lines.

Note: Refer to line number when placing a grid item in a grid container.

.grid-item{
grid-column-start:1;
grid-column-end:3;
}


.grid-item{
grid-row-start:1;
grid-row-end:3;
}



CSS Grid Container

Grid Container

To make an HTML element behave as a grid container, you have to set the display property to grid, or inline grid.


Grid containers consist of grid items, placed inside columns and rows.


The grid-template-columns property

The grid-template-columns property defines the number of columns in your grid layout, and it can define the width of each column.

The value is a space-separated-list, where each value defines the width of the respective column.

If you want your grid layout to contain 4 columns, specify the width of the 4 columns or "auto" if all columns should have the same width.


Note: If you have more than 4 items in a 4 columns grid, the grid will automatically add a new row to put the items in.

The grid-template-columns property can also be used to specify the size(width) of the columns.

.grid-container{
display:grid;
grid-template-column: auto, auto, auto, auto;
}


.grid-container{
display:grid;
grid-template-row:auto, auto, auto, auto;


The justify-content property

The justify-content property is used to align the whole grid inside the container.

Note: The grid's total width has to be less than the container's width for the justify-content property to have any effect.
}


.grid-container{
display:grid;
grid-template-column: auto, auto, auto, auto;
grid-template-row: auto,auto, auto, auto;
justify-content:start;
}


The align-content property

The align-content property is used to vertically align the whole grid inside the container.

Note: The grid's total height has to be less than the container's height for the align-content property to have any effect.

.grid-container{
display:grid;
height:480px;
align-content: center;



CSS Grid Item

Child Elements (Items)

A grid container contains grid items

By default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows.


The grid-column Property:

The grid-column property defines on which column(s) to place an item.

You define where the item will start, and where the item will end.


Note: The grid-column property is a shorthand property for the grid-column-start and the grid-column-end properties.

To place an item, you can refer to line numbers, or use the keyword "span" to define how many columns the item will span.


Make "item1" start on column 1 and end before column 5;

.item1{ /* Make item1 start on column 1 and end before column 5*/
grid-column: 1/ 5;
}


.item1{ /*Make item1 start on column 1 and span 3 columns*/
grid-column: 1/ span 3;
}


The grid-row property

The grid-row property defines on which row to place an item.

You define where the item will start, and where the item will end.

Note: Grid-row is the short-hand of grid-row-start and grid-row-end


.item1{/* Make item1 start on row1 and end in row4*/
grid-row: 1 / 4;
}


.item1{
grid-row: 1 / span 2;
}


The grid-area property

The grid-area property can be used as a shorthand property for the grid-row-start, grid-column-start, grid-row-end and the grid-column-end properties.

.item1{
grid-area: 1/2/5/6;
}


Naming Grid Items

The grid-area property can also be used to assign names to grid items.

Note: Named grid items can be referred to by the grid-template-areas property of the grid container.

Example

Item1 gets the name "myArea" and spans all five columns in a five columns grid layout:

.item1{
grid-area:myArea;
}

.grid-container{
grid-template-areas: "myArea myArea myArea myArea myArea";
}

Each row is defined by apostrophes('')

The columns in each row is defined inside the apostrophes, separated by a space.

Note: A period sign represents a grid item with no name.


To define two rows, define the column of the second row inside another set of apostrophes:

.grid-container{
grid-template-areas: 'myArea myArea' 'myArea myArea'
}
