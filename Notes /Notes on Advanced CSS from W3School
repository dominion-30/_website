CSS ROUNDED CORNERS

CSS ROUNDED CORNERS
With the CSS border-radius property, you can give any element "rounded corners"

CSS border-radius property

The CSS border-radius property defines the radius of an element corners.

Tip: This property allows you to add rounded corners to elements!

Tip: The border-radius property is actually a shorthand property for the border-top-left radius, border-top-right-radius, border-bottom-right-radius and border-bottom-left-radius properties.

CSS border-radius -Specify Each Corner.

The border-radius property can have from one to four values. Here are the rules:

Four values-border-radius: 15px 50px 30px 5px; (first value applies to top-left corner, second value applies to top-right corner, third value applies to bottom-right corner, and fourth value applies to bottom-left corner).

Three values- border-radius: 15px 50px 30px; (first value applies to the top-left corner, the second value applies to the top-right and bottom-left corners and the third value applies to the bottom-right corner.

Two values-border-radius: 15px 50px; (first value applies to top-left and bottom-right corners, and the second value applies to the top-right corner and bottom-left corner.)

One value- border-radius: 15px( the value applies to all the four corners, which are rounded equally)

CSS Border Images

CSS Border Images

With the CSS border-image property, you can set an image to be used as the border around an element.


CSS border-image property

The CSS border-image property allows you to specify an image to be used instead of the normal border around an element.

The property has three parts:
1. The image to use as the border
2. Where to slice the image
3. Define whether the middle sections should be repeated or stretched.

Note: The border-image property takes the image and slices it into nine sections, like a tic-tac-toe board. It then places the  corners at the corners, and the middle sections are repeated or stretched as you specify.

FOR border-image to work, the element also needs the border property set!

Here, the middle sections of the image are repeated to create the border:

border: 0.5em solid transparent;
border-image: url(path to image);
padding: 0.5em;


Here, the middle section of the image are stretched to create the border.

Note: The border-image property is actually a shorthand property for the border-image-source, border-image slice, border-image-width, border-image-outset and border-image-repeat properties.


CSS Multiple Backgrounds

In this chapter you will learn how to add multiple background images to one element.

You will also learn about the following properties:
background-size
background-origin
background-clip


CSS Multiple Backgrounds

CSS allows you to add multiple background images for an element, through the background-image property.

The different background images are separated by commas, and the images are stacked on top of each other, where the first image is closest to the viewer.

Specifying Multiple Backgrounds

background-image: url("path to image"), url(path to image);/* both works*/
background-position: left bottom, right top;
background-repeat: no-repeat, no-repeat;

Note: If you want to use the background shorthand, you have to first specify background-image, background-position and background-repeat for that image, before going to the next image.

Note: Multiple background images can be specified using either the individual background properties(as above) or the background shorthand properly.


CSS Background Size

The CSS background-size property allows you to specify the size of background images.

The size can be specified in lengths, percentages, or by using one of the two keywords: contain or cover.

<div class="test">

</div>


.test{
border: 0.5em solid transparent;
background-image: url(path to image);
backgrounnd-position: left bottom;
padding:0.2em;
background-size:100px 50px;

}


The two other possible values for background-size are contain and cover.

The contain Keyword scales the background image to be as large as possible (but both its width and its height must fit inside the content area). As such, depending on the properties of the background image and the background positioning area, there may be some areas of the background which are not covered by the background image.


The cover keyword scales the background image so that the content area is completely covered by the background image(both its width and height are equal to or exceed the content area). As such, some parts of the background image may not be visible in the background positioning area.


Define Sizes of Multiple Background Images

The background-size property also accepts multiple values for background size (using a comma-separated list), when working with multiple backgrounds.


Full Size Background Image
Now we want to have a background image on a website that covers the entire browser window at all times.

The requirements are as follows:

Fill the entire page with the image(no white space)
Scale image as needed
Center image on page
Do no cause scrollbars.

The following example shows how to do it; use the <html> element (the <html> element is always at least the height of the browser window). Then set a fixed and centered background on it.


css
.hero-image{
background-image: url(path to image);
background-size:cover;
background-position:center;
height:500px;
position:relative;


CSS background-origin Property.

The CSS background-origin property specifies where the background image is positioned.

The property takes three different values:
border-box: the background image starts from the upper left corner of the border.

padding-box: (default) the background image starts from the upper left corner of the padding edge.

content-box: the background image starts from the upper left corner of the content.


CSS Colors

RGBA Colors

RGBA color values are an extension of RGB color value with an alpha channel, which specifies the opacity for a color.

An RGBA color value is specified with rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0(fully transparent) and 1.0(fully opaque).

for the css

.color{
background-color:rgba(255,0,0,0.2)(red with transparency of 0.2)
background-color:rgba(255,0,0,1)red
}


HSL Colors

HSL stands for Hue, Saturation and Lightness.

An HSL color value is specified with: hsl(hue, saturation, lightness).

1. Hue is a degree on the color wheel (from 0 to 360):

0(or 360) is red.
120 is green.
240 is blue.

2. Saturation is a percentage value: 100% is the full color.
3. Lightness is also a percentage: 0% is dark(black) and 100% is white.


HSLA Colors

HSLA color values are an extension of HSL color values with an alpha channel, which specifies the opacity for a color.

An HSLA color value is specified with hsla(hue, saturation,lightness, alpha), where the alpha parameter defines the opacity.


Opacity

The CSS opacity property sets the opacity for the whole element (both background color and text will be opaque/transparent).

The opacity property value must be a number between 0.0(fullyhue transparent) and 1.0(fully opaque).


CSS Color Keywords

This page will explain the transparent, currentcolor, and inherit keywords.


The transparent Keyword

The transparent keyword is used to make a color transparent. This is often used to make a transparent background color for an element.

css

.hero{
background-image: url(path to image);
background-color:transparent;

}

Note: The transparent keyword is equivalent to rgba(0,0,0,0). RGBA color values are an extensino of RGB color values with an alpha channel.


The currentcolor keyword
The currentcolor keyword is like a variable that holds the current color property of an element.

This keyword can be useful if you want a specific color to be consistent in an element or a page.


The inherit Keyword

The inherit keyword specifies that a property should inherit it value from its parent element.

The inherit keyword can be used for any CSS property, and on any HTML element.


CSS Gradients

Gradient Backgrounds

CSS gradients let you display smooth transitions between two or more specified colors.

CSS defines three types of gradients:

Linear Gradients(goes down/up/left/right/diagonally)
Radial Gradients(defined by their center)
Conic Gradients(rotated around a center point).


CSS Linear Gradients

CSS Linear Gradients

To create a linear gradient you must define at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction(or an angle) along with the gradient effect.

Syntax

background-image: linear-gradient(direction, color-stop1, color-stop2, . . .);

Direction- Top to Bottom(this is default)

The following example shows a linear gradient that starts at the top. It starts red, transitioning to yellow.


#grad{
background-image:linear-gradient(red, yellow);
}


Direction-Left to Right.

The following example shows a linear gradient that starts from the left. It starts red, transitioning to yellow: left to right.

#grad{
background-image:linear-gradient(to right, red, yellow);
}


Direction- Diagonal
You can make a gradient diagonally by specifying both the horizontal and vertical starting positions.

The following example shows a linear gradient that starts at top left( and goes to bottom right). It starts red, transitioning to yellow:


Using Angles

If you want more control over the direction of the gradient, you can define an angle, instead of the predefined directions (to bottom, to top, to right, to left, to bottom left, etc). A value of 0deg is equivalent to "to top". A value of 90deg is equivalent to "to right". A value of 180deg is equivalent to "to bottom"


Syntax

background-image: linear-gradient(angle, color-stop1, color-stop2);

The example above involves use only two color stops.

Using Multiple Color Stops
The example below shows a linear gradient (from top to bottom) with multiple colors.

#grad{
background-image: linear-gradient(red,orange,yellow,green,blue,indigo,violet);

}

Using Transparency

CSS gradients also support transparency, which can be used to create fading effects.

To add transparency, we use the rgba() function to define the color stops


Repeating a linear-gradient

The repeating-linear-gradient() function is used to repeat linear gradients.

#grad{
repeating-linear-gradient(red, yellow 10%, green 20%)
}


CSS Radial Gradients

CSS Radial Gradients

A radial gradient is defined by its center.

To create a radial gradient you must also define at least two color stops.


Syntax:

background-image:radial-gradient(shape size at position, start-color,..., last color);

By default, shape is ellipse, size is farthest-corner, and position is center.

Radial Gradient- Evenly Spaced color stops (this is default)

#grad{
background-image: radial-gradient(red,yellow,green);
}

Radial Gradient-Differently Spaced Color Stops
The following example shows a radial gradient with diffrently spaced color stops.


#grad{
background-image:radial-gradient(red 5%, yellow 15%, green 60%);

Set Shape

The Shape parameter defines the shape. It can take the value circle or ellipse. The default value is ellipse.


Use of Different Size Keywords

The size parameter defines the size of the gradient. It can take four values:

closest-side
farthest-side
closest-corner
farthest-corner

Example

A radial gradient with different size keywords:

#grad1{
background-image:radial-gradient(closest-side at 60% 55%, red, yellow,black);


#grad2{

background-image:radial-gradient(farthest-side at 60% 20%, red, yellow, green );
}


Repeating a radial-gradient

The repeating-radial-gradient() function is used to repeat radial gradients.

}
background-image: repeating-linear-gradient(black,white);
}

CSS Conic Gradients


CSS Conic Gradients
A conic gradient is a gradient with color transitions rotated around a center point.

To create a conic gradient you must define at least two colors.

Sytax

background-image: conic-gradient([from angle] [at position,] color[degree], color[degree], .. );

By default, angle is 0deg and position is center.

If no degree is specified, the colors will be spread equally around the center point.

Conic Gradient: Three Colors

The following example shows a conic gradient with three colors:

#grad{
background-image: conic-gradient(green, yellow, red);
}


Conic Gradient: Five Colors

#grad{
background-image: conic-gradient(red, yellow, green, blue, black);


}


Conic Gradient: Three Colors and Degrees

The following example shows a conic gradient with three colors and a degree for each color:

#grad{
background-image: conic-gradient(red 45deg, yellow 90deg, green 220deg);


CSS SHADOW EFFECTS

With CSS you can add shadow to text and to elements.
}


In these chapters you will learn about the following properties:

text-shadow
box-shadow


CSS Text Shadow

The CSS text-shadow property applies shadow to text.

In its simplest use, you only specify the horizontal shadow(2px) and the vertical shadow(2px):

h1{

text-shadow: 2px 2px;
}

Next, add a color to the shadow:

h1{
text-shadow: 2px 2px red;
}


To add a blur effect to the shadow:

h1{
text-shadow:2px 2px 5px yellow;
}

Multiple Shadows

To add more than one shadow to the text, you can add a comma-separated list of shadows.

The following example shows a red and blue neon glow shadow:

#grad{
text-shadow:0 0 3px #ff0000, 0 0 3px #0000ff;
}


CSS BOX SHADOW

Note: text-shadow is used to add shadow to a text while box-shadow is used to add shadow to an element.


CSS Box Shadow

CSS box-shadow property

The CSS box-shadow property is used to apply one or more shadows to an element.

Specify a Horizontal and a Vertical Shadow.

In its simplest use, you only specify a horizontal and vertical shadow. The default color of the shadow is the current text color.

#grad{
box-shadow: 10px 10px;
}

Specify a Color for the Shadow

The color parameter defines the color of the shadow.

#grad{
box-shadow: 10px 10px lightblue;
}


ADD A BLUR EFFECT TO THE SHADOW

The blur parameter defines the blur radius. The higher the number, the more blurred the shadow will be.


SET THE SPREAD RADIUS OF THE SHADOW
The spread parameter defines the spread radius. A positive value increases the size of the shadow, a negative value decreases the size of the shadow.

#grad{
box-shadow: 10px(this is the x value) 10px(this is the y value) 20px(this is the blur) 30px(this is the spread radius of the shadow box)

}

SET THE INSET PARAMETER
The inset parameter changes the shadow from an outer shadow(outset) to an inner shadow.

#grad{
box-shadow: 10px 10px 20px coral inset;
}


CSS Text Overflow, Word Wrap, Line Breaking Rules, and Writing Modes.

In this chapter you will learn about the following properties:
text-overflow
word-wrap
word-break
writing-mode

CSS Text Overflow

The CSS text-overflow property specifies how overflowed content that is not displayed showed be signaled to the user.

It can be clipped:

This is some long text that will

or it can be rendered as an ellipsis(...):

This is some long text that ...

The CSS code is as follows:

.test1{
white-space: nowrap;
width: 200px;
border: 1px solid #000000;
overflow:hidden;
text-overflow:clip;


.test2{
white-space:nowrap;
width: 200px;
border: 1px solid black;
overflow:hidden;
text-overflow:ellipsis;
}


The following example shows how you can display the overflowed content when hovering over the element:
p.test1:hover{

overflow:visible;
}

CSS Word Wrapping

The CSS word-wrap property allows long words to be able to be broken and wrap onto the next line.

Note: If a word is too long to fit within an area, it expands outside:

Allow long words to be able to be broken and wrap onto the next line:

p{
word-wrap:break-word;
}


CSS Word Breaking

The CSS word-break property specifies line breaking rules.

CSS Writing Mode

The CSS writing-mode property specifies whether lines of text are laid out horizontally or vertically.

Some text with a span element with a vertical writing-mode.

The following example shows some different writing modes:

p.test1{
writing-mode: horizontal-tb;


}

p.test2{
writing-mode: vertical-rl;
}


CSS 2D Transforms

CSS transforms allow you to move, rotate, scale and skew elements.

In this chapter you will learn about the following CSS property:
transform.


CSS 2D Transforms Methods

with the css transform property you can use the following 2D  transformation methods:

translate()
rotate()
scaleX()
scaleY()
scale()
skewX()
skewY()
skew()
matrix()


The translate() Method

The translate() method moves an element from its current position(according to the parameters given for the X-axis and Y-axis).

The following example moves the <div> element 50 pixels to the right, and 100 pixels down from its current position:

div{
transform: translate(50px, 100px);
}


The rotate() method

The rotate() method rotates an element closewise or counter-closewise according to a given degree.

The following example rotates the <div> element clockwise with 20 degrees:

div{
transform: rotate(20deg);
}


Note: Using negative values will rotate the element counter-clockwise.


The following example rotates the <div> element counter-clockwise with 20 degrees:

div{
transform: rotate(-20deg);
}

The Scale() Method

The Scale() method increases or decreases the size of an element(according to the parameters given for the width and height).


The following example increases the <div> element to be two times of its original width, and three times of its original height:

div{
transform: scale(2,3);
} 


The following example decreases the <div> element to be half it's original width and half times the original height.


div{
transform: scale(0.5,0.5);

}


The ScaleX() Method

The scaleX() method increases or decreases the width of an element.

The following example increases the <div> element to be two times of its original width:

div{
transform: scaleX(2);
}


The skewX() Method

The skewX() method skews an element along the X-axis by the given angle.

The following example skews the <div> element 20 degrees along the X-axis:


div{
transform: skewX(20deg);
}

The SkewY() Method

The SkewY() method skews an element along the Y-axis by the given angle. The following example skews the <div> element 20 degrees along the Y-axis:


div{
transform: skewY(20deg)
}

The Skew() Method

The skew() method skews an element along the X and Y-axis by the given angles.

The following example skews the <div> element 20 degrees along the X-axis, and 10 degrees along the Y-axis

div{
transform: skew(20deg, 10deg);
}

The matrix() Method

The matrix() method combines all the 2D transform methods into one.

The matrix() method take six parameters, containing mathematic functions, which allow you to rotate, scale, move(translate), and skew elements.

The parameters are as follow: matrix(scaleX(), SkewY(), SkewX(), ScaleY(),translateX(), translateY())


CSS 3D Transforms

CSS also supports 3D transformations.

In this chapter you will learn about the following CSS property:

transform


CSS 3D Transforms Methods

With the CSS transform property you can use the following 3D transformation methods:

rotateX()
rotateY()
rotateZ()

The rotateX() Method

div{
transform: rotateX(150deg);
}

The rotateX() method rotates an element around its X-axis at a given degree. Same as rotateY() and rotateZ()


CSS Transitions

CSS transitions allow you to change property values smoothly, over a given duration.

In this chapter you will learn about the following properties:

transition
transition-delay
transition-duration
transition-property
transition-timing-function

How to Use CSS Transitions?

To create a transition effect, you must specify two things:

the CSS property you want to add an effect to
the duration of the effect

Note: If the duration part is not specified, the transition will have no effect, because the default value is 0.


The following example shows a 100px * 100px red <div> element. The <div> element has also specified a transition effect for the width property, with a duration of 2 seconds.


div{
width: 100px;
height: 100px;
background:red;
transition:width 2s;
}


The transition effect will start when the specified CSS property (width) changes value.

Now, let us specify a new value for the width property when a user mouses over the <div> element:

div:hover{
width: 300px;
}

Notice that when the cursor mouses out of the element, it will gradually change back to its original style.

Change Several Property Values

The following example adds a transition effect for both the width and height property, with a duration of 2 seconds for the width and 4 seconds for the height:

div{
transition: width 2s height 4s;
}


Specify the  Speed Curve of the Transition

The transition-timing-function property specifies the speed curve of the transition effect.

The transition-timing-function property can have the following values:

ease - specifies a transition effect with a slow start, then fast, then end slowly(this is default)

linear - specifies a transition effect with the same speed from start to end.

ease-in - specifies a transition effect with a slow start.

ease-out - specifies a transition effect with a slow end.

ease-in-out - specifies a transition effect with a slow start and end.

Cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function.


#div{
transition-timing-function:linear;
}

#div{transition-timing-function:ease;}

#div{transition-timing-function:ease-in;}

#div{
transition-timing-function:ease-out;
}


#div{
transition-timing-function:ease-in-out;
}




CSS Animations

CSS Animations
CSS allows animation of HTML elements without using Javascript or Flash!

In this chapter you will learn about the following properties:
@keyframes
animation-name
animation-duration
animation-delay
animation-iteration-count
animation-direction
animation-timing-function
animation-fill-mode
animation


Todays Note:

CSS Transitions

CSS transitions allows you to change property values smoothly, over a given duration.

Mouse over the element below to see a transition effect:

In this chapter you will learn about the following properties:

transition
transition-delay
transition-duration
transition-property
transition-timing-function


How to Use CSS Transitions?

TO create a transition effect, you must specify two things:

the CSS property you want to add an effect to
the duration of the effect

Note: If the duration part is not specified, the transition will have no effect, because the default value is 0.

The following example shows a 100px * 100px red <div> element has also specified a transition effect for the width property, with a duration of 2 seconds
